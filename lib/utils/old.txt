
           // Container(
              //     width: 100.0,
              //     height: 50.0,
              //     color: Colors.lightBlue,
              //     child: FlatButton(
              //       onPressed: () {
              //         setState(() {
              //           !shapesShown
              //               ? shapesSliderAnimation.forward()
              //               : shapesSliderAnimation.reverse();
              //           shapesShown = !shapesShown;
              //         });
              //       },
              //       child: Text('SHAPES'),
              //     )),
// class CircularAnimatedList extends StatefulWidget {
//   final List<Widget> widgetList;
//   final LRTBsize lrtb;
//   final DIREC introDirection;
//   final Size size;
//  // final String buttonText;
//   final bool onStart;
//   final bool hasToggleButton;

//   CircularAnimatedList({Key key, this.widgetList, this.lrtb, this.introDirection=DIREC.BTT, this.size, this.onStart=false, this.hasToggleButton=true}) : super(key: key);
//   @override
//   _CircularAnimatedListState createState() => _CircularAnimatedListState();
// }

// class _CircularAnimatedListState extends State<CircularAnimatedList>
//     with TickerProviderStateMixin {
//   AnimationController shapesSliderAnimation;
//   List<Animation> itemAnimations;
//   bool shapesShown = false;
  

//   @override
//   void initState() {
//     super.initState();

//     shapesSliderAnimation = AnimationController(
//       vsync: this,
//       duration: Duration(milliseconds: 1100),
//     );
//     itemAnimations = List.generate((widget.widgetList.length), (i) {
//       int index = i;
//       double start = index * 0.1;
//       double duration = 0.6;
//       double end = duration + start;
//       if(end>1)end=1.0;
//       return new Tween<double>(
//         begin: 800,
//         end:0.0
//         ).animate(
//           new CurvedAnimation(
//               parent: shapesSliderAnimation,
//               curve: new Interval(start, end, curve: Curves.decelerate)));
//     }).toList();
//     if(widget.onStart){
//       shapesSliderAnimation.forward();
//       shapesShown=true;
//     }
//   }

//   Iterable<Widget> _buildShapes(Size screenSize) {
//     return widget.widgetList.map((item) {
//       int index = widget.widgetList.indexOf(item);
//       return
//       AnimatedBuilder(
//         animation: shapesSliderAnimation,
//         child: Padding(
//           padding: const EdgeInsets.symmetric(vertical: 4.0, horizontal: 8.0),
//           child: item
            
//         ),
//         builder: (context, child) {
//          // if(widget.size.height*(widget.lrtb.bottom-widget.lrtb.top)-100< itemAnimations[index].value)return Container();
//         return  new Transform.translate(
//               offset: 
//                Offset( itemAnimations[index].value,0.0),


//               child: child,
//             );
//         }
//       );
//     });
//   }

//   @override
//   Widget build(BuildContext context) {
//     Size s = widget.size;//MediaQuery.of(context).size;
//      double h=s.height*(widget.lrtb.bottom-widget.lrtb.top);
//     print(s);
//     return Positioned(
//       left: s.width*widget.lrtb.left,
//       width: s.width*(widget.lrtb.right-widget.lrtb.left),
//       top: s.height*widget.lrtb.top,
//       height: h,
//       child:

//             ListView(
//             padding: EdgeInsets.symmetric(horizontal: 3.0),
//             // crossAxisAlignment: CrossAxisAlignment.end,
//             scrollDirection: (widget.introDirection==DIREC.LTR||widget.introDirection==DIREC.RTL)?Axis.horizontal:Axis.vertical,
//             children: <Widget>[
//               (widget.hasToggleButton)? MaterialButton(
//                   color: Colors.pink,
//                   shape: RoundedRectangleBorder(
//                       borderRadius: BorderRadius.all(Radius.circular(20.0))),
//                   onPressed: () {
//                      setState(() {
//                         !shapesShown
//                             ? shapesSliderAnimation.forward()
//                             : shapesSliderAnimation.reverse();
//                         shapesShown = !shapesShown;
//                       });
//                   },
//                   child: Text(
//                     "About Me",
//                     style: TextStyle(color: Colors.white),
//                   ),
//                 ):Container(),

//             ]..addAll(_buildShapes(s)),
//       ),
//    // ),
//      //  ),
//     );
//   }
// }



// // class FormattedWidget extends StatelessWidget {

// //   final Alignment alignment;
// //   final EdgeInsets padding;
// //   final Widget child;
// //   final  Size size;
// //   FormattedWidget({Key key,  this.alignment, this.padding, this.child, this.size}) : super(key: key);

// //   @override
// //   Widget build(BuildContext context) {

// //     return Padding(
// //       padding:padding,
// //       child: Align(alignment: alignment,
// //       child: SizedBox.fromSize(
// //         size: size,
// //         child: child,
// //       ),),
// //     );
// //   }
// // }
 /* )
    return FormattedWidget(
      alignment: Alignment.topRight,
      size: Size(
          100.0,
          shapesShown
              ? 450.0
              : shapesSliderAnimation.status == AnimationStatus.reverse
                  ? 50 + 400.0 * (1 - shapesSliderAnimation.value)
                  : 50.0),
      child:*/
      
    //  OverflowBox(
     //   maxHeight: h,
        //  child: Container(
        //    width:s.width*(widget.lrtb.right-widget.lrtb.left) ,
        //    height:   shapesShown
        //         ? h
        //         : shapesSliderAnimation.status == AnimationStatus.reverse
        //             ? 50 + (h-50.0) * (1 - shapesSliderAnimation.value)
        //             : 50.0,
          // s.height*(widget.lrtb.bottom-widget.lrtb.top),
          // color: Colors.orange,
           //child: